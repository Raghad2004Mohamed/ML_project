# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16oUiJOD3ZnP8TDI02x3QWWhc4CdwvPGL
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt  # Added for the pie chart

# --- Title and Instructions ---
st.set_page_config(page_title="EEG Seizure Detection App", layout="centered")
st.title("üß† EEG Seizure Detection")
st.markdown("""
Upload EEG data to predict seizure classes.

- ‚úÖ CSV upload with error handling
- üìé Sample dataset available for download
- üß† Choose a model (.pkl) or use the default one
- üîÆ Visualize predictions
""")

# --- Downloadable Sample Dataset ---
st.markdown("### üìé [Download Sample EEG Dataset](https://github.com/Raghad2004Mohamed/ML_project?tab=readme-ov-file#csv-file)")

# --- Model Selection ---
st.sidebar.header("üîß Model Options")
model_choice = st.sidebar.radio("Choose model option:", ["Use default model", "Upload your model (.pkl)"])

@st.cache_resource
def load_default_model():
    with open("model.pkl", "rb") as f:
        loaded_obj = pickle.load(f)
        if isinstance(loaded_obj, tuple):
            return loaded_obj[0]  # Assume model is first
        return loaded_obj

# Upload model if chosen
model = None
if model_choice == "Upload your model (.pkl)":
    uploaded_model = st.sidebar.file_uploader("Upload your model (.pkl)", type=["pkl"])
    if uploaded_model is not None:
        try:
            loaded_obj = pickle.load(uploaded_model)
            model = loaded_obj[0] if isinstance(loaded_obj, tuple) else loaded_obj
            st.sidebar.success("‚úÖ Custom model loaded!")
        except Exception as e:
            st.sidebar.error(f"Error loading model: {e}")
else:
    model = load_default_model()

# --- Upload EEG Data File ---
st.markdown("### üìÅ Upload EEG CSV File")
uploaded_file = st.file_uploader("Upload your EEG CSV file", type=["csv"])

if uploaded_file is not None and model is not None:
    try:
        df = pd.read_csv(uploaded_file)

        # Clean up columns
        df.columns = df.columns.str.strip()
        if 'Unnamed' in df.columns:
            df = df.drop(columns=[col for col in df.columns if 'Unnamed' in col])

        # Drop missing values
        df.dropna(inplace=True)

        # Label mapping (optional)
        label_map = {
            1: "Seizure",
            2: "No Seizure (EEG 1)",
            3: "No Seizure (EEG 2)",
            4: "No Seizure (EEG 3)",
            5: "No Seizure (Eyes Closed)"
        }

        # Separate features and label
        X = df.drop(columns=['y'], errors='ignore')
        y_true = df['y'] if 'y' in df.columns else None

        # Predict
        predictions = model.predict(X)
        prediction_labels = [label_map.get(p, f"Class {p}") for p in predictions]

        # --- Display Results ---
        st.success("üîÆ Predictions Complete")
        result_df = pd.DataFrame({"Prediction": predictions, "Label": prediction_labels})
        st.dataframe(result_df)

        # --- Pie Chart of Predictions ---
        st.markdown("### üìä Prediction Summary")
        pie_data = result_df["Label"].value_counts()
        st.write(pie_data)

        # Matplotlib pie chart
        fig, ax = plt.subplots()
        ax.pie(pie_data.values, labels=pie_data.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')  # Circle shape
        st.pyplot(fig)

    except Exception as e:
        st.error(f"‚ùå An error occurred while processing the file: {e}")

elif uploaded_file is not None and model is None:
    st.warning("‚ö†Ô∏è Please upload a valid model file.")