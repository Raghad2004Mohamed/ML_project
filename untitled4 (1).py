# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17eyhLDFxc-9bP-97fjnH43jcslLp5pL9
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import time

st.set_page_config(
    page_title="EEG Seizure Detection",
    page_icon="⚡",
    layout="wide"
)

@st.cache_resource
def load_components():
    model = joblib.load('best_seizure_model.pkl')
    scaler = joblib.load('scaler.pkl')
    try:
        selector = joblib.load('feature_selector.pkl')
    except:
        selector = None
    return model, scaler, selector

model, scaler, selector = load_components()

st.title("⚡ EEG Seizure Detection App")
st.write("This app predicts whether a seizure is present based on EEG features.")

mode = st.radio("Choose prediction mode:", ["Single Input", "Batch Input"])

if mode == "Single Input":
    st.subheader("Single Record Prediction")
    features = []
    cols = st.columns(4)
    for i in range(20):
        with cols[i % 4]:
            val = st.number_input(f"Feature {i+1}", -500.0, 500.0, 0.0, step=0.1)
            features.append(val)

    if st.button("Predict Seizure"):
        X = np.array(features).reshape(1, -1)
        X_scaled = scaler.transform(X)
        if selector:
            X_scaled = selector.transform(X_scaled)
        pred = model.predict(X_scaled)[0]
        prob = model.predict_proba(X_scaled)[0][1]

        st.success(f"Prediction: {'Seizure' if pred else 'No Seizure'}")
        st.info(f"Confidence: {prob * 100:.2f}%")

if mode == "Batch Input":
    st.subheader("Batch Record Prediction")
    file = st.file_uploader("Upload CSV file with 20 EEG features")
    if file:
        df = pd.read_csv(file)
        if df.shape[1] < 20:
            st.error("Please provide at least 20 feature columns")
        else:
            X = df.iloc[:, :20].values
            X_scaled = scaler.transform(X)
            if selector:
                X_scaled = selector.transform(X_scaled)
            preds = model.predict(X_scaled)
            probs = model.predict_proba(X_scaled)[:, 1]
            df['Prediction'] = preds
            df['Probability'] = probs
            st.dataframe(df.head())
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("Download Predictions", csv, "predictions.csv", "text/csv")