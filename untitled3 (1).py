# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdRU5uXpoVwW8Fl1wkio9WzFZijiRo1Z
"""

# deployment_app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Set page config
st.set_page_config(
    page_title="Epileptic Seizure Prediction",
    page_icon="üß†",
    layout="wide"
)

# Load the trained model and scaler (replace with your actual model file)
@st.cache_resource
def load_model():
    try:
        model = joblib.load('best_seizure_model.pkl')
        scaler = joblib.load('scaler.pkl')
        return model, scaler
    except FileNotFoundError:
        st.error("Model files not found. Please ensure 'best_seizure_model.pkl' and 'scaler.pkl' are in the same directory.")
        return None, None

model, scaler = load_model()

# Sidebar for user input
st.sidebar.header("About")
st.sidebar.write("""
This app predicts whether a patient is experiencing an epileptic seizure based on EEG signals.
The model was trained using machine learning algorithms on EEG data.
""")

st.sidebar.header("Options")
upload_option = st.sidebar.radio(
    "Choose input method:",
    ("Manual Input", "File Upload")
)

# Main content
st.title("üß† Epileptic Seizure Prediction from EEG Signals")
st.write("""
This application uses a machine learning model to predict epileptic seizures based on EEG signal data.
""")

if model is None or scaler is None:
    st.stop()

# Function to process input and make prediction
def predict_seizure(input_data):
    try:
        # Scale the input data
        scaled_data = scaler.transform(input_data)

        # Make prediction
        prediction = model.predict(scaled_data)
        prediction_proba = model.predict_proba(scaled_data)

        return prediction, prediction_proba
    except Exception as e:
        st.error(f"Error during prediction: {str(e)}")
        return None, None

if upload_option == "Manual Input":
    st.header("Manual EEG Data Input")
    st.write("Enter EEG signal values for prediction:")

    # Create input fields for EEG signals (simplified version)
    cols = st.columns(4)
    input_data = []

    # Assuming we're using the top 20 features as in your feature selection
    for i in range(20):
        with cols[i % 4]:
            val = st.number_input(
                f"EEG Signal {i+1}",
                min_value=-500.0,
                max_value=500.0,
                value=0.0,
                step=0.1,
                key=f"signal_{i}"
            )
            input_data.append(val)

    if st.button("Predict"):
        # Convert input to numpy array and reshape for prediction
        input_array = np.array(input_data).reshape(1, -1)

        # Make prediction
        prediction, prediction_proba = predict_seizure(input_array)

        if prediction is not None:
            st.subheader("Prediction Results")

            # Display prediction
            if prediction[0] == 1:
                st.error("‚ö†Ô∏è **Prediction:** Seizure detected")
            else:
                st.success("‚úÖ **Prediction:** No seizure detected")

            # Display probability
            st.write(f"**Probability:** {prediction_proba[0][1]*100:.2f}% chance of seizure")

            # Visualize the probabilities
            fig, ax = plt.subplots()
            ax.bar(['No Seizure', 'Seizure'], prediction_proba[0], color=['green', 'red'])
            ax.set_ylabel('Probability')
            ax.set_title('Prediction Probabilities')
            st.pyplot(fig)

else:  # File Upload option
    st.header("Upload EEG Data File")
    uploaded_file = st.file_uploader(
        "Upload a CSV file with EEG data",
        type=["csv"],
        help="The file should contain EEG signal values in columns"
    )

    if uploaded_file is not None:
        try:
            # Read the uploaded file
            df = pd.read_csv(uploaded_file)

            # Display the uploaded data
            st.subheader("Uploaded Data Preview")
            st.write(df.head())

            # Check if data has the right format
            if df.shape[1] < 20:
                st.warning("The uploaded file doesn't have enough features (expected at least 20).")
            else:
                # Select only the first 20 features (or whichever your model expects)
                input_data = df.iloc[:, :20].values

                if st.button("Predict"):
                    # Make predictions for all rows
                    predictions, probabilities = predict_seizure(input_data)

                    if predictions is not None:
                        # Add predictions to the dataframe
                        df['Prediction'] = predictions
                        df['Seizure_Probability'] = [prob[1] for prob in probabilities]

                        # Display results
                        st.subheader("Prediction Results")
                        st.write(df[['Prediction', 'Seizure_Probability']].head())

                        # Summary statistics
                        seizure_count = sum(predictions == 1)
                        total_count = len(predictions)
                        st.write(f"**Summary:** {seizure_count} of {total_count} records ({seizure_count/total_count:.1%}) predicted as seizures")

                        # Visualization
                        fig, ax = plt.subplots(1, 2, figsize=(12, 4))

                        # Prediction distribution
                        ax[0].pie(
                            [total_count - seizure_count, seizure_count],
                            labels=['No Seizure', 'Seizure'],
                            colors=['green', 'red'],
                            autopct='%1.1f%%'
                        )
                        ax[0].set_title('Prediction Distribution')

                        # Probability distribution
                        ax[1].hist(
                            df['Seizure_Probability'],
                            bins=20,
                            color='purple',
                            alpha=0.7
                        )
                        ax[1].set_xlabel('Seizure Probability')
                        ax[1].set_ylabel('Count')
                        ax[1].set_title('Probability Distribution')

                        st.pyplot(fig)

                        # Download button for results
                        st.download_button(
                            label="Download Predictions",
                            data=df.to_csv(index=False).encode('utf-8'),
                            file_name='eeg_predictions.csv',
                            mime='text/csv'
                        )

        except Exception as e:
            st.error(f"Error processing file: {str(e)}")

# Add some explanations
st.markdown("---")
st.subheader("How It Works")
st.write("""
1. **Model**: The app uses a trained machine learning model (Random Forest/SVM/Logistic Regression) to analyze EEG signals.
2. **Input**: You can either manually enter EEG values or upload a CSV file with multiple records.
3. **Output**: The model predicts whether each EEG signal pattern indicates a seizure (1) or not (0), along with a probability score.
""")

st.subheader("Interpretation")
st.write("""
- **Seizure Probability**: A value closer to 1 indicates higher confidence in seizure detection.
- **Threshold**: The model uses a default threshold of 0.5 for binary classification.
- **Important**: This is a predictive tool, not a diagnostic device. Always consult a medical professional.
""")