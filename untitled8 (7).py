# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16oUiJOD3ZnP8TDI02x3QWWhc4CdwvPGL
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO

# --- Page Setup ---
st.set_page_config(page_title="EEG Seizure Detection App", layout="centered")
st.title("🧠 EEG Seizure Detection")
st.markdown("""
Upload EEG data to predict seizure classes.

- ✅ Upload your EEG `.csv` file
- 🧠 Choose a default or custom model
- 📊 View predictions and download results
- 📈 Charts for class summary
- ⚙️ Optional preprocessing steps
""")

# --- Sample Dataset ---
st.markdown("### 📎 [Download Sample EEG Dataset](https://github.com/Raghad2004Mohamed/ML_project?tab=readme-ov-file#csv-file)")

# --- Sidebar Model Options ---
st.sidebar.header("🔧 Model Settings")
model_choice = st.sidebar.radio("Choose model option:", ["Use default model", "Upload your model (.pkl)"])

@st.cache_resource
def load_default_model():
    with open("model.pkl", "rb") as f:
        obj = pickle.load(f)
        return obj[0] if isinstance(obj, tuple) else obj

model = None
if model_choice == "Upload your model (.pkl)":
    uploaded_model = st.sidebar.file_uploader("Upload your model", type=["pkl"])
    if uploaded_model:
        try:
            obj = pickle.load(uploaded_model)
            model = obj[0] if isinstance(obj, tuple) else obj
            st.sidebar.success("✅ Model loaded!")
        except Exception as e:
            st.sidebar.error(f"❌ Failed to load model: {e}")
else:
    model = load_default_model()

# --- Sidebar Preprocessing Options ---
st.sidebar.header("⚙️ Preprocessing")
drop_unnamed = st.sidebar.checkbox("Drop 'Unnamed' columns", value=True)
drop_na = st.sidebar.checkbox("Drop missing values", value=True)

# --- File Upload ---
st.markdown("### 📁 Upload EEG CSV File")
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

# --- Retry Button ---
retry = st.button("🔄 Retry")

if uploaded_file is not None and model is not None:
    try:
        df = pd.read_csv(uploaded_file)

        if drop_unnamed:
            df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
        if drop_na:
            df.dropna(inplace=True)

        df.columns = df.columns.str.strip()
        X = df.drop(columns=['y'], errors='ignore')
        y_true = df['y'] if 'y' in df.columns else None

        label_map = {
            1: "Seizure",
            2: "No Seizure (EEG 1)",
            3: "No Seizure (EEG 2)",
            4: "No Seizure (EEG 3)",
            5: "No Seizure (Eyes Closed)"
        }

        # Predict with spinner
        with st.spinner("🔮 Making predictions..."):
            predictions = model.predict(X)

        prediction_labels = [label_map.get(p, f"Class {p}") for p in predictions]
        result_df = pd.DataFrame({"Prediction": predictions, "Label": prediction_labels})
        st.success("✅ Predictions complete!")
        st.dataframe(result_df)

        # --- Download Predictions ---
        csv = result_df.to_csv(index=False).encode('utf-8')
        st.download_button("⬇️ Download Results as CSV", csv, "predictions.csv", "text/csv")

        # --- Class Distribution ---
        st.markdown("### 📊 Prediction Summary")
        pie_data = result_df["Label"].value_counts()

        col1, col2 = st.columns(2)

        with col1:
            fig1, ax1 = plt.subplots()
            ax1.pie(pie_data.values, labels=pie_data.index, autopct='%1.1f%%', startangle=90)
            ax1.axis('equal')
            st.pyplot(fig1)

        with col2:
            st.bar_chart(pie_data)

        # --- Class-wise Details ---
        with st.expander("🔍 View Records by Predicted Class"):
            for label in pie_data.index:
                st.markdown(f"**🧠 {label}**")
                st.dataframe(result_df[result_df["Label"] == label])

    except Exception as e:
        st.error(f"❌ Error: {e}")
        st.info("Try uploading again or checking the CSV format.")

elif uploaded_file is not None and model is None:
    st.warning("⚠️ Please upload a valid model file.")