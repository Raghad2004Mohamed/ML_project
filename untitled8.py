# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16oUiJOD3ZnP8TDI02x3QWWhc4CdwvPGL
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
from io import BytesIO

# Set page config
st.set_page_config(page_title="EEG Seizure Detection", layout="centered")

st.title("üß† EEG Seizure Detection App")
st.write("Upload your EEG dataset CSV and get predictions for seizure activity.")

# Load model
@st.cache_resource
def load_model():
    with open("model.pkl", "rb") as file:
        return pickle.load(file)

model = load_model()

# Class label dictionary
class_labels = {
    1: "Seizure",
    2: "No Seizure (Eyes Open)",
    3: "No Seizure (Eyes Closed)",
    4: "No Seizure (Mental Task 1)",
    5: "No Seizure (Mental Task 2)"
}

# Sidebar info
st.sidebar.title("üß† Model Info")
st.sidebar.markdown("""
- **Model:** Random Forest Classifier
- **Trees:** 10
- **Depth:** 10
- **Trained on:** UCI EEG dataset
""")

# Sample CSV download
with st.sidebar:
    with open("sample_eeg.csv", "rb") as sample_file:
        st.download_button("üì• Download Sample CSV", sample_file, "sample_eeg.csv", "text/csv")

# Upload file
uploaded_file = st.file_uploader("Upload EEG CSV file", type=["csv"])

if uploaded_file is not None:
    st.success(f"‚úÖ Uploaded: {uploaded_file.name} ({uploaded_file.size / 1024:.2f} KB)")

    try:
        df = pd.read_csv(uploaded_file)
        st.subheader("üìÑ Data Preview")
        st.dataframe(df.head())

        # Drop non-feature columns if needed
        if 'y' in df.columns:
            X = df.drop('y', axis=1)
        else:
            X = df

        # Predict
        prediction = model.predict(X)
        prediction_labels = [class_labels.get(p, "Unknown") for p in prediction]

        # Show predictions
        st.subheader("üß™ Predictions")
        st.write(prediction_labels[:20])  # show first 20

        # Pie chart
        st.subheader("üìä Prediction Distribution")
        pred_series = pd.Series(prediction_labels)
        fig, ax = plt.subplots()
        pred_series.value_counts().plot.pie(autopct="%1.1f%%", ax=ax, startangle=90)
        ax.set_ylabel("")
        st.pyplot(fig)

        # Add predictions to original data
        output_df = df.copy()
        output_df["Prediction"] = prediction_labels

        # Download CSV
        csv = output_df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Download Predictions CSV", csv, "predictions.csv", "text/csv")

    except Exception as e:
        st.error("‚ùå Error processing the file. Please make sure it's a valid CSV with numeric features.")
        st.exception(e)
else:
    st.info("üìÅ Please upload a CSV file to get started.")